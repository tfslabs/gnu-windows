.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Font::TTF::Dumper 3pm"
.TH Font::TTF::Dumper 3pm "2016-08-03" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Font::TTF::Dumper \- Debug dump of a font datastructure, avoiding recursion on ' PARENT'
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Font::TTF::Dumper;
\&    
\&    # Print a table from the font structure:
\&    print ttfdump($font\->{$tag});
\&    
\&    # Print font table with name
\&    print ttfdump($font\->{\*(Aqhead\*(Aq}, \*(Aqhead\*(Aq);
\&    
\&    # Print font table with name and other options
\&    print ttfdump($font\->{\*(Aqhead\*(Aq}, \*(Aqhead\*(Aq, %opts);
\&
\&    # Print one glyph\*(Aqs data:
\&    print ttfdump($font\->{\*(Aqloca\*(Aq}\->read\->{\*(Aqglyphs\*(Aq}[$gid], "glyph_$gid");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Font::TTF data structures are trees created from hashes and arrays. When trying to figure
out how the structures work, sometimes it is helpful to use Data::Dumper on them. However,
many of the object structures have ' \s-1PARENT\s0' links that refer back to the object's parent,
which means that Data::Dumper ends up dumping the whole font no matter what.
.PP
The main purpose of this module is to invoke Data::Dumper with a
filter that skips over the ' \s-1PARENT\s0' element of any hash.
.PP
To reduce output further, this module also skips over ' \s-1CACHE\s0' elements and any 
hash element whose value is a Font::TTF::Glyph or Font::TTF::Font object. 
(Really should make this configurable.)
.PP
If \f(CW$opts\fR{'d'}, then set Deepcopy mode to minimize use of crossreferencing.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bob Hallissy <http://scripts.sil.org/FontUtils>.
.SH "LICENSING"
.IX Header "LICENSING"
Copyright (c) 1998\-2016, \s-1SIL\s0 International (http://www.sil.org)
.PP
This module is released under the terms of the Artistic License 2.0. 
For details, see the full text of the license in the file \s-1LICENSE.\s0
