.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Font::TTF::Delta 3pm"
.TH Font::TTF::Delta 3pm "2016-08-03" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Font::TTF::Delta \- Opentype Device tables
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Each device table corresponds to a set of deltas for a particular point over
a range of ppem values.
.IP "first" 4
.IX Item "first"
The first ppem value in the range
.IP "last" 4
.IX Item "last"
The last ppem value in the range
.IP "val" 4
.IX Item "val"
This is an array of deltas corresponding to each ppem in the range between
first and last inclusive.
.IP "fmt" 4
.IX Item "fmt"
This is the fmt used (log2 of number bits per value) when the device table was
read. It is recalculated on output.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Creates a new device table
.SS "read"
.IX Subsection "read"
Reads a device table from the given \s-1IO\s0 object at the current location
.ie n .SS "out($fh, $style)"
.el .SS "out($fh, \f(CW$style\fP)"
.IX Subsection "out($fh, $style)"
Outputs a device table to the given \s-1IO\s0 object at the current location, or just
returns the data to be output if \f(CW$style\fR != 0
.ie n .SS "$d\->\fBsignature()\fP"
.el .SS "\f(CW$d\fP\->\fBsignature()\fP"
.IX Subsection "$d->signature()"
Returns a content based identifying string for this delta for
compression purposes
.ie n .SS "$d\->out_xml($context)"
.el .SS "\f(CW$d\fP\->out_xml($context)"
.IX Subsection "$d->out_xml($context)"
Outputs a delta in \s-1XML\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken <http://scripts.sil.org/FontUtils>.
.SH "LICENSING"
.IX Header "LICENSING"
Copyright (c) 1998\-2016, \s-1SIL\s0 International (http://www.sil.org)
.PP
This module is released under the terms of the Artistic License 2.0. 
For details, see the full text of the license in the file \s-1LICENSE.\s0
