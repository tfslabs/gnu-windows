.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Font::TTF::OldCmap 3pm"
.TH Font::TTF::OldCmap 3pm "2016-08-03" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Font::TTF::OldCmap \- Character map table
.PP
This module is deprecated
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Looks after the character map. The primary structure used for handling a cmap
is the Font::TTF::Segarr which handles the segmented arrays of format 4 tables,
and in a simpler form for format 0 tables.
.PP
Due to the complexity of working with segmented arrays, most of the handling of
such arrays is via methods rather than via instance variables.
.PP
One important feature of a format 4 table is that it always contains a segment
with a final address of 0xFFFF. If you are creating a table from scratch this is
important (although Font::TTF::Segarr can work quite happily without it).
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
The instance variables listed here are not preceded by a space due to their
emulating structural information in the font.
.IP "Num" 4
.IX Item "Num"
Number of subtables in this table
.IP "Tables" 4
.IX Item "Tables"
An array of subtables ([0..Num\-1])
.PP
Each subtables also has its own instance variables which are, again, not
preceded by a space.
.IP "Platform" 4
.IX Item "Platform"
The platform number for this subtable
.IP "Encoding" 4
.IX Item "Encoding"
The encoding number for this subtable
.IP "Format" 4
.IX Item "Format"
Gives the stored format of this subtable
.IP "Ver" 4
.IX Item "Ver"
Gives the version (or language) information for this subtable
.IP "val" 4
.IX Item "val"
This points to a Font::TTF::Segarr which contains the content of the particular
subtable.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$t\->read"
.el .SS "\f(CW$t\fP\->read"
.IX Subsection "$t->read"
Reads the cmap into memory. Format 4 subtables read the whole subtable and
fill in the segmented array accordingly.
.PP
Format 2 subtables are not read at all.
.ie n .SS "$t\->ms_lookup($uni)"
.el .SS "\f(CW$t\fP\->ms_lookup($uni)"
.IX Subsection "$t->ms_lookup($uni)"
Given a Unicode value in the \s-1MS\s0 table (Platform 3, Encoding 1) locates that
table and looks up the appropriate glyph number from it.
.ie n .SS "$t\->find_ms"
.el .SS "\f(CW$t\fP\->find_ms"
.IX Subsection "$t->find_ms"
Finds the Microsoft Unicode table and sets the \f(CW\*(C`mstable\*(C'\fR instance variable
to it if found. Returns the table it finds.
.ie n .SS "$t\->out($fh)"
.el .SS "\f(CW$t\fP\->out($fh)"
.IX Subsection "$t->out($fh)"
Writes out a cmap table to a filehandle. If it has not been read, then
just copies from input file to output
.ie n .SS "@map = $t\->reverse([$num])"
.el .SS "\f(CW@map\fP = \f(CW$t\fP\->reverse([$num])"
.IX Subsection "@map = $t->reverse([$num])"
Returns a reverse map of the table of given number or the Microsoft
cmap. I.e. given a glyph gives the Unicode value for it.
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
No support for format 2 tables (\s-1MBCS\s0)
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken <http://scripts.sil.org/FontUtils>.
.SH "LICENSING"
.IX Header "LICENSING"
Copyright (c) 1998\-2016, \s-1SIL\s0 International (http://www.sil.org)
.PP
This module is released under the terms of the Artistic License 2.0. 
For details, see the full text of the license in the file \s-1LICENSE.\s0
