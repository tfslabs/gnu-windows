.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Font::TTF::Cmap 3pm"
.TH Font::TTF::Cmap 3pm "2016-08-03" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Font::TTF::Cmap \- Character map table
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Looks after the character map. For ease of use, the actual cmap is held in
a hash against codepoint. Thus for a given table:
.PP
.Vb 1
\&    $gid = $font\->{\*(Aqcmap\*(Aq}{\*(AqTables\*(Aq}[0]{\*(Aqval\*(Aq}{$code};
.Ve
.PP
Note that \f(CW$code\fR should be a true value (0x1234) rather than a string representation.
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
The instance variables listed here are not preceded by a space due to their
emulating structural information in the font.
.IP "Num" 4
.IX Item "Num"
Number of subtables in this table
.IP "Tables" 4
.IX Item "Tables"
An array of subtables ([0..Num\-1])
.Sp
Each subtable also has its own instance variables which are, again, not
preceded by a space.
.RS 4
.IP "Platform" 4
.IX Item "Platform"
The platform number for this subtable
.IP "Encoding" 4
.IX Item "Encoding"
The encoding number for this subtable
.IP "Format" 4
.IX Item "Format"
Gives the stored format of this subtable
.IP "Ver" 4
.IX Item "Ver"
Gives the version (or language) information for this subtable
.IP "val" 4
.IX Item "val"
A hash keyed by the codepoint value (not a string) storing the glyph id
.RE
.RS 4
.RE
.PP
The following cmap options are controlled by instance variables that start with a space:
.IP "allowholes" 4
.IX Item "allowholes"
By default, when generating format 4 cmap subtables character codes that point to glyph zero
(normally called .notdef) are not included in the subtable. In some cases including some of these
character codes can result in a smaller format 4 subtable. To enable this behavior, set allowholes 
to non-zero.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$t\->read"
.el .SS "\f(CW$t\fP\->read"
.IX Subsection "$t->read"
Reads the cmap into memory. Format 4 subtables read the whole subtable and
fill in the segmented array accordingly.
.ie n .SS "$t\->ms_lookup($uni)"
.el .SS "\f(CW$t\fP\->ms_lookup($uni)"
.IX Subsection "$t->ms_lookup($uni)"
Finds a Unicode table, giving preference to the \s-1MS\s0 one, and looks up the given
Unicode codepoint in it to find the glyph id.
.ie n .SS "$t\->find_ms"
.el .SS "\f(CW$t\fP\->find_ms"
.IX Subsection "$t->find_ms"
Finds the a Unicode table, giving preference to the Microsoft one, and sets the \f(CW\*(C`mstable\*(C'\fR instance variable
to it if found. Returns the table it finds.
.ie n .SS "$t\->ms_enc"
.el .SS "\f(CW$t\fP\->ms_enc"
.IX Subsection "$t->ms_enc"
Returns the encoding of the microsoft table (0 => symbol, etc.). Returns undef if there is
no Microsoft cmap.
.ie n .SS "$t\->out($fh)"
.el .SS "\f(CW$t\fP\->out($fh)"
.IX Subsection "$t->out($fh)"
Writes out a cmap table to a filehandle. If it has not been read, then
just copies from input file to output
.ie n .SS "$t\->XML_element($context, $depth, $name, $val)"
.el .SS "\f(CW$t\fP\->XML_element($context, \f(CW$depth\fP, \f(CW$name\fP, \f(CW$val\fP)"
.IX Subsection "$t->XML_element($context, $depth, $name, $val)"
Outputs the elements of the cmap in \s-1XML.\s0 We only need to process val here
.ie n .SS "$t\->\fBminsize()\fP"
.el .SS "\f(CW$t\fP\->\fBminsize()\fP"
.IX Subsection "$t->minsize()"
Returns the minimum size this table can be in bytes. If it is smaller than this, then the table
must be bad and should be deleted or whatever.
.ie n .SS "$t\->update"
.el .SS "\f(CW$t\fP\->update"
.IX Subsection "$t->update"
Tidies the cmap table.
.PP
Removes \s-1MS\s0 Fmt12 cmap if it is no longer needed.
.PP
Removes from all cmaps any codepoint that map to GID=0. Note that such entries will
be re-introduced as necessary depending on the cmap format.
.ie n .SS "@map = $t\->reverse(%opt)"
.el .SS "\f(CW@map\fP = \f(CW$t\fP\->reverse(%opt)"
.IX Subsection "@map = $t->reverse(%opt)"
Returns a reverse map of the Unicode cmap. I.e. given a glyph gives the Unicode value for it. Options are:
.IP "tnum" 4
.IX Item "tnum"
Table number to use rather than the default Unicode table
.IP "array" 4
.IX Item "array"
Returns each element of reverse as an array since a glyph may be mapped by more
than one Unicode value. The arrays are unsorted. Otherwise store any one unicode value for a glyph.
.SS "is_unicode($index)"
.IX Subsection "is_unicode($index)"
Returns whether the table of a given index is known to be a unicode table
(as specified in the specifications)
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
Format 14 (Unicode Variation Sequences) cmaps are not supported.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken <http://scripts.sil.org/FontUtils>.
.SH "LICENSING"
.IX Header "LICENSING"
Copyright (c) 1998\-2016, \s-1SIL\s0 International (http://www.sil.org)
.PP
This module is released under the terms of the Artistic License 2.0. 
For details, see the full text of the license in the file \s-1LICENSE.\s0
