.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Font::TTF::Coverage 3pm"
.TH Font::TTF::Coverage 3pm "2016-08-03" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Font::TTF::Coverage \- Opentype coverage and class definition objects
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Coverage tables and class definition objects are virtually identical concepts
in OpenType. Their difference comes purely in their storage. Therefore we can
say that a coverage table is a class definition in which the class definition
for each glyph is the corresponding index in the coverage table. The resulting
data structure is that a Coverage table has the following fields:
.IP "cover" 4
.IX Item "cover"
A boolean to indicate whether this table is a coverage table (\s-1TRUE\s0) or a
class definition (\s-1FALSE\s0)
.IP "val" 4
.IX Item "val"
A hash of glyph ids against values (either coverage index or class value)
.IP "fmt" 4
.IX Item "fmt"
The storage format used is given here, but is recalculated when the table
is written out.
.IP "count" 4
.IX Item "count"
A count of the elements in a coverage table for use with add. Each subsequent
addition is added with the current count and increments the count.
.IP "max" 4
.IX Item "max"
Maximum class value in a class table.
.SH "METHODS"
.IX Header "METHODS"
.SS "new($isCover [, vals])"
.IX Subsection "new($isCover [, vals])"
Creates a new coverage table or class definition table, depending upon the
value of \f(CW$isCover\fR. if \f(CW$isCover\fR then vals may be a list of glyphs to include in order.
If no \f(CW$isCover\fR, then vals is a hash of glyphs against class values.
.SS "read($fh)"
.IX Subsection "read($fh)"
Reads the coverage/class table from the given file handle
.ie n .SS "out($fh, $state)"
.el .SS "out($fh, \f(CW$state\fP)"
.IX Subsection "out($fh, $state)"
Writes the coverage/class table to the given file handle. If \f(CW$state\fR is 1 then
the output string is returned rather than being output to a filehandle.
.ie n .SS "$c\->add($glyphid[, $class])"
.el .SS "\f(CW$c\fP\->add($glyphid[, \f(CW$class\fP])"
.IX Subsection "$c->add($glyphid[, $class])"
Adds a glyph id to the coverage or class table. 
Returns the index or class number of the glyphid added.
.ie n .SS "$c\->signature"
.el .SS "\f(CW$c\fP\->signature"
.IX Subsection "$c->signature"
Returns a vector of all the glyph ids covered by this coverage table or class
.ie n .SS "@map=$c\->sort"
.el .SS "\f(CW@map\fP=$c\->sort"
.IX Subsection "@map=$c->sort"
Sorts the coverage table so that indexes are in ascending order of glyphid.
Returns a map such that \f(CW$map\fR[$new_index]=$old_index.
.ie n .SS "$c\->out_xml($context)"
.el .SS "\f(CW$c\fP\->out_xml($context)"
.IX Subsection "$c->out_xml($context)"
Outputs this coverage/class in \s-1XML\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken <http://scripts.sil.org/FontUtils>.
.SH "LICENSING"
.IX Header "LICENSING"
Copyright (c) 1998\-2016, \s-1SIL\s0 International (http://www.sil.org)
.PP
This module is released under the terms of the Artistic License 2.0. 
For details, see the full text of the license in the file \s-1LICENSE.\s0
