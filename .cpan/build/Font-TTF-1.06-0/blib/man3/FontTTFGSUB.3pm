.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Font::TTF::GSUB 3pm"
.TH Font::TTF::GSUB 3pm "2016-08-03" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Font::TTF::GSUB \- Module support for the GSUB table in conjunction with TTOpen
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handles the \s-1GSUB\s0 subtables in relation to Ttopen tables. Due to the variety of
different lookup types, the data structures are not all that straightforward,
although I have tried to make life easy for myself when using this!
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
The structure of a \s-1GSUB\s0 table is the same as that given in Font::TTF::Ttopen.
Here we give some of the semantics specific to \s-1GSUB\s0 lookups.
.IP "\s-1ACTION_TYPE\s0" 4
.IX Item "ACTION_TYPE"
This is a string taking one of 4 values indicating the nature of the information
in the \s-1ACTION\s0 array of the rule:
.RS 4
.IP "g" 8
.IX Item "g"
The action contains a string of glyphs to replace the match string by
.IP "l" 8
.IX Item "l"
The action array contains a list of offsets and lookups to run, in order, on
the matched string
.IP "a" 8
.IX Item "a"
The action array is an unordered set of optional replacements for the matched
glyph. The application should make the selection somehow.
.IP "o" 8
.IX Item "o"
The action array is empty (in fact there is no rule array for this type of
rule) and the \s-1ADJUST\s0 value should be added to the glyph id to find the replacement
glyph id value
.IP "r" 8
.IX Item "r"
The action array is a list of replacement glyphs in coverage order. This \s-1ACTION_TYPE\s0
is used only for Type 8 Reverse Chaining lookups which, by design, are single glyph
substitution.
.RE
.RS 4
.RE
.IP "\s-1MATCH_TYPE\s0" 4
.IX Item "MATCH_TYPE"
This indicates which type of information the various \s-1MATCH\s0 arrays (\s-1MATCH, PRE,
POST\s0) hold in the rule:
.RS 4
.IP "g" 8
.IX Item "g"
The array holds a string of glyph ids which should match exactly
.IP "c" 8
.IX Item "c"
The array holds a sequence of class definitions which each glyph should
correspondingly match to
.IP "o" 8
.IX Item "o"
The array holds offsets to coverage tables
.RE
.RS 4
.RE
.SH "CORRESPONDANCE TO LAYOUT TYPES"
.IX Header "CORRESPONDANCE TO LAYOUT TYPES"
The following table gives the values for \s-1ACTION_TYPE\s0 and \s-1MATCH_TYPE\s0 for each
of the 12 different lookup types found in the \s-1GSUB\s0 table definition:
.PP
.Vb 3
\&                1.1 1.2  2  3  4  5.1 5.2 5.3  6.1 6.2 6.3  8
\&  ACTION_TYPE    o   g   g  a  g   l   l   l    l   l   l   r
\&  MATCH_TYPE                   g   g   c   o    g   c   o   o
.Ve
.PP
Hopefully, the rest of the uses of the variables should make sense from this
table.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$t\->read_sub($fh, $lookup, $index)"
.el .SS "\f(CW$t\fP\->read_sub($fh, \f(CW$lookup\fP, \f(CW$index\fP)"
.IX Subsection "$t->read_sub($fh, $lookup, $index)"
Asked by the superclass to read in from the given file the indexth subtable from
lookup number lookup. The file is positioned ready for the read.
.ie n .SS "$t\->extension"
.el .SS "\f(CW$t\fP\->extension"
.IX Subsection "$t->extension"
Returns the table type number for the extension table
.ie n .SS "$t\->out_sub($fh, $lookup, $index)"
.el .SS "\f(CW$t\fP\->out_sub($fh, \f(CW$lookup\fP, \f(CW$index\fP)"
.IX Subsection "$t->out_sub($fh, $lookup, $index)"
Passed the filehandle to output to, suitably positioned, the lookup and subtable
index, this function outputs the subtable to \f(CW$fh\fR at that point.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken <http://scripts.sil.org/FontUtils>.
.SH "LICENSING"
.IX Header "LICENSING"
Copyright (c) 1998\-2016, \s-1SIL\s0 International (http://www.sil.org)
.PP
This module is released under the terms of the Artistic License 2.0. 
For details, see the full text of the license in the file \s-1LICENSE.\s0
