.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Font::TTF::Kern 3pm"
.TH Font::TTF::Kern 3pm "2016-08-03" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Font::TTF::Kern \- Kerning tables
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Kerning tables are held as an ordered collection of subtables each giving
incremental information regarding the kerning of various pairs of glyphs.
.PP
The basic structure of the kerning data structure is:
.PP
.Vb 1
\&    $kern = $f\->{\*(Aqkern\*(Aq}{\*(Aqtables\*(Aq}[$tnum]{\*(Aqkerns\*(Aq}{$leftnum}{$rightnum};
.Ve
.PP
Due to the possible complexity of some kerning tables the above information
is insufficient. Reference also needs to be made to the type of the table and
the coverage field.
.SH "INSTANCE VARIABLES"
.IX Header "INSTANCE VARIABLES"
The instance variables for a kerning table are relatively straightforward.
.IP "Version" 4
.IX Item "Version"
Version number of the kerning table
.IP "Num" 4
.IX Item "Num"
Number of subtables in the kerning table
.IP "tables" 4
.IX Item "tables"
Array of subtables in the kerning table
.Sp
Each subtable has a number of instance variables.
.RS 4
.IP "kern" 4
.IX Item "kern"
A two level hash array containing kerning values. The indexing is left
is via left class and right class. It may seem using hashes is strange,
but most tables are not type 2 and this method saves empty array values.
.IP "type" 4
.IX Item "type"
Stores the table type. Only type 0 and type 2 tables are specified for
TrueType so far.
.IP "coverage" 4
.IX Item "coverage"
A bit field of coverage information regarding the kerning value. See the
TrueType specification for details.
.IP "Version" 4
.IX Item "Version"
Contains the version number of the table.
.IP "Num" 4
.IX Item "Num"
Number of kerning pairs in this type 0 table.
.IP "left" 4
.IX Item "left"
An array indexed by glyph \- left_first which returns a class number for
the glyph in type 2 tables.
.IP "right" 4
.IX Item "right"
An array indexed by glyph \- right_first which returns a class number for
the glyph in type 2 tables.
.IP "left_first" 4
.IX Item "left_first"
the glyph number of the first element in the left array for type 2 tables.
.IP "right_first" 4
.IX Item "right_first"
the glyph number of the first element in the right array for type 2 tables.
.IP "num_left" 4
.IX Item "num_left"
Number of left classes
.IP "num_right" 4
.IX Item "num_right"
Number of right classes
.RE
.RS 4
.RE
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "$t\->read"
.el .SS "\f(CW$t\fP\->read"
.IX Subsection "$t->read"
Reads the whole kerning table into structures
.ie n .SS "$t\->out($fh)"
.el .SS "\f(CW$t\fP\->out($fh)"
.IX Subsection "$t->out($fh)"
Outputs the kerning tables to the given file
.ie n .SS "$t\->XML_element($context, $depth, $key, $value)"
.el .SS "\f(CW$t\fP\->XML_element($context, \f(CW$depth\fP, \f(CW$key\fP, \f(CW$value\fP)"
.IX Subsection "$t->XML_element($context, $depth, $key, $value)"
Handles outputting the kern hash into \s-1XML\s0 a little more tidily
.ie n .SS "$t\->\fBminsize()\fP"
.el .SS "\f(CW$t\fP\->\fBminsize()\fP"
.IX Subsection "$t->minsize()"
Returns the minimum size this table can be. If it is smaller than this, then the table
must be bad and should be deleted or whatever.
.SH "BUGS"
.IX Header "BUGS"
.IP "\(bu" 4
Only supports kerning table types 0 & 2.
.IP "\(bu" 4
No real support functions to \fIdo\fR anything with the kerning tables yet.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Hosken <http://scripts.sil.org/FontUtils>.
.SH "LICENSING"
.IX Header "LICENSING"
Copyright (c) 1998\-2016, \s-1SIL\s0 International (http://www.sil.org)
.PP
This module is released under the terms of the Artistic License 2.0. 
For details, see the full text of the license in the file \s-1LICENSE.\s0
